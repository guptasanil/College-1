


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   11 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   12 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   13 00000000         ;#######################################################
                       ################################
   14 00000000 E59F0164        ldr              r0, = -1049 ; number to display
                                                            
   15 00000004 E1B01080        movs             r1, r0, lsl #1 ; logic shift r0
                                                             left 1 place and s
                                                            et carry 
   16 00000008 2A000025        bcs              neg_num     ; if has carry, num
                                                             is negative
   17 0000000C         neg_num_done
   18 0000000C E3A0100A        ldr              r1, = 10    ; r1 = denominator 
                                                            = 10
   19 00000010 E3A04000        ldr              r4, = 0     ; r4 = number of di
                                                            gits
   20 00000014 E3A05101        ldr              r5, = 0x40000000 ; r5 = start a
                                                            ddress 
   21 00000018 E3500000 
                       unit    cmp              r0, #0      ; check if end of d
                                                            igits
   22 0000001C 0A000007        BEQ              light       ; if end of digits,
                                                             go to light sectio
                                                            n
   23 00000020 EB000034        bl               div_sub     ; branch w/ link to
                                                             the division subro
                                                            utine    
   24 00000024 E3510000        cmp              r1, #0      ; is the remainder 
                                                            0?
   25 00000028 1A000000        bne              not_zero    ; if remainder != 0
                                                            , branch to not_zer
                                                            o
   26 0000002C E3A0100F        ldr              r1, = 15    ;    ; if remainder
                                                             = 0, r1 = 15 (so a
                                                            ll lights turn on)
   27 00000030         not_zero
   28 00000030 E7851104        str              r1, [r5, r4, lsl #2] ; store di
                                                            git in array for li
                                                            ghts
   29 00000034 E2844001        add              r4, r4, #1  ; r4++ (increment t
                                                            he index) 
   30 00000038 E3A0100A        ldr              r1, = 10    ; make r1 (denomina
                                                            tor) 10 again
   31 0000003C EAFFFFF5        b                unit
   32 00000040         light



ARM Macro Assembler    Page 2 


   33 00000040 E35B0001        cmp              r11, #1     ; is number negativ
                                                            e?
   34 00000044 0A00001A        beq              set_neg     ; if negative goto 
                                                            set_neg
   35 00000048         set_neg_done
   36 00000048 E59F1120        ldr              r1, = IO1DIR
   37 0000004C E3A0280F        ldr              r2, = 0x000f0000 ; select leds 
                                                            P1.19 to P1.16
   38 00000050 E5812000        str              r2, [r1]    ; leds are now outp
                                                            uts
   39 00000054 E59F1118        ldr              r1, = IO1SET ; r1 now points to
                                                             the set register
   40 00000058 E5812000        str              r2, [r1]    ; leds set to turn 
                                                            offset them to turn
                                                             the LEDs off
   41 0000005C E59F2114        ldr              r2, = IO1CLR ; r2 now points to
                                                             the clear register
                                                            
   42 00000060 E3A03000 
                       while   ldr              r3,= 0x00000000 ; start with le
                                                            d P1.16
   43 00000064 E1A08004        mov              r8, r4      ; r8 = index
   44 00000068 E2888001        add              r8, r8, #1  ; r8++
   45 0000006C E5823000 
                       loop    str              r3, [r2]    ; clears bit then t
                                                            urns on led
   46 00000070 E59F9104        ldr              r9, = 6000000
   47 00000074 E2599001 
                       delay   subs             r9, r9, #1  ; decrements r9 (r9
                                                             is acting as a tim
                                                            er/ delay)
   48 00000078 1AFFFFFD        bne              delay       ; delays for ~0.5 s
                                                            econds
   49 0000007C E5813000        str              r3, [r1]    ; set the bit -> tu
                                                            rn off the LED
   50 00000080 E248A002        sub              r10, r8, #2 ; r8 (index) - 2 an
                                                            d store in 
   51 00000084 E795310A        ldr              r3, [r5, r10, lsl #2] ; 
   52 00000088 EA00000D        b                reverse_sub ; reverse bits so l
                                                            ighst are no longer
                                                             backward on board
   53 0000008C         reverse_done
   54 0000008C E1A035A7        mov              r3, r7, lsr #11 ; move reversed
                                                             bits 
   55 00000090 E2488001        sub              r8, r8, #1  ;
   56 00000094 E3580000        cmp              r8, #0      ;
   57 00000098 1AFFFFF3        bne              loop        ; loops back to dis
                                                            play next binary nu
                                                            m
   58 0000009C EAFFFFEF        b                while       ; while loop to mak
                                                            e it display contin
                                                            uosly
   59 000000A0 EAFFFFFE 
                       stop    b                stop
   60 000000A4         
   61 000000A4         neg_num
   62 000000A4 E3A0B001        ldr              r11, =1     ; r11 = 1 (r11 is t
                                                            he negative flag)
   63 000000A8 E1E00000        mvn              r0, r0      ; r0 = original num



ARM Macro Assembler    Page 3 


                                                            , invert r0's bits
   64 000000AC E2800001        add              r0, r0, #1  ; r0 = r0 + 1, two'
                                                            s compliment of ori
                                                            ginal r0
   65 000000B0 EAFFFFD5        b                neg_num_done
   66 000000B4         set_neg
   67 000000B4 E3A0B00B        ldr              r11, =11
   68 000000B8 E785B104        str              r11, [r5, r4, lsl #2] ; saving 
                                                            1011 sequence to ar
                                                            ray to indicate '-'
                                                            
   69 000000BC E2844001        add              r4, r4, #1
   70 000000C0 EAFFFFE0        b                set_neg_done
   71 000000C4         reverse_sub
   72 000000C4 E3A0B102        ldr              r11, = 0x80000000 ; mask
   73 000000C8 E3A06000        ldr              r6, = 0     ; counter
   74 000000CC E3A07000        ldr              r7, = 0     ; result
   75 000000D0 E1A03E03        mov              r3, r3, lsl #28
   76 000000D4         rev_loop
   77 000000D4 E3560004        cmp              r6, #4
   78 000000D8 AAFFFFEB        bge              reverse_done
   79 000000DC E00BC003        and              r12, r11, r3
   80 000000E0 E1A03083        mov              r3, r3, lsl #1
   81 000000E4 E087700C        add              r7, r7, r12
   82 000000E8 E1A070A7        mov              r7, r7, lsr #1
   83 000000EC E2866001        add              r6, r6, #1
   84 000000F0 EAFFFFF7        b                rev_loop
   85 000000F4         
   86 000000F4 EAFFFFFE 
                       fin     b                fin
   87 000000F8         
   88 000000F8         ; Division Subroutine - div
   89 000000F8         ; Parameters:
   90 000000F8         ; r0: numerator, r1: denominator -> r0/r1
   91 000000F8         ; Returns:
   92 000000F8         ; r0: quotient, r1: remainder
   93 000000F8         
   94 000000F8 E92D5FF0 
                       div_sub push{r4-r12,     lr}
   95 000000FC E3A04000        ldr              r4, = 0     ; quotient var
   96 00000100 E3A05000        ldr              r5, = 0     ; remainder var
   97 00000104 E3A07000        ldr              r7, = 0     ; numerator length 
                                                            (x) init at 0
   98 00000108 E1A06000        mov              r6, r0      ; r6 = numerator
   99 0000010C         get_num_length                       ; finds length of n
                                                            umerator
  100 0000010C E1B060A6        movs             r6, r6, lsr #1 ; shift numerato
                                                            r right 1
  101 00000110 0A000001        beq              correct_length ; if r6 == r6 >>
                                                             1, r7 now equals n
                                                            umerator length
  102 00000114 E2877001        add              r7, r7, #1  ; r7 = x, x++ (stop
                                                             at n-1)
  103 00000118 EAFFFFFB        b                get_num_length ; loop until len
                                                            gth of numerator is
                                                             found
  104 0000011C         correct_length
  105 0000011C         div_start
  106 0000011C E3570000        cmp              r7, #0      ; x == 0?



ARM Macro Assembler    Page 4 


  107 00000120 BA00000E        blt              div_sub_end ; if numeraor lengt
                                                            h (x) < 0 branch to
                                                             end of div sub
  108 00000124 E1A05085        mov              r5, r5, lsl #1 ; remainder = (r
                                                            emainder << 1)
  109 00000128 E3A09001        ldr              r9, = 1     ; r9 = 1
  110 0000012C E1A08719        mov              r8, r9, lsl r7 ; r8 = (r9 shift
                                                            ed left by the leng
                                                            th of the numerator
                                                            )
  111 00000130 E0088000        and              r8, r8, r0  ; r8 = number at x
  112 00000134 E1A08738        mov              r8, r8, lsr r7 ; shift r8 back 
                                                            r7 places
  113 00000138 E0855008        add              r5, r5, r8  ; r5 = r5 + r8, rem
                                                            ainder += number at
                                                             x
  114 0000013C         div_check
  115 0000013C E1550001        cmp              r5, r1
  116 00000140 BA000004        blt              div_done    ; if remainder < de
                                                            nominator, branch t
                                                            o end
  117 00000144 E0455001        sub              r5, r5, r1  ; remainder = remai
                                                            nder - denominator 
                                                            
  118 00000148 E3A09001        ldr              r9, = 1     ; r9 = 1
  119 0000014C E1A08719        mov              r8, r9, lsl r7 ; r8 = (r9 shift
                                                            ed left by the leng
                                                            th of the numerator
                                                             (whats left))
  120 00000150 E1844008        orr              r4, r8      ; r4 = quotient || 
                                                            number at r8
  121 00000154 EAFFFFF8        b                div_check
  122 00000158         div_done
  123 00000158 E2477001        sub              r7, r7, #1  ; x-- (numerator le
                                                            ngth index--)
  124 0000015C EAFFFFEE        b                div_start
  125 00000160         div_sub_end
  126 00000160 E1A00004        mov              r0, r4      ; r0 = quotient
  127 00000164 E1A01005        mov              r1, r5      ; r1 = remainder
  128 00000168 E8BD9FF0        pop{r4-r12,      pc}
  129 0000016C         
  130 0000016C                 END
              FFFFFBE7 
              E0028018 
              E0028014 
              E002801C 
              005B8D80 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
correct_length 0000011C

Symbol: correct_length
   Definitions
      At line 104 in file App.s
   Uses
      At line 101 in file App.s
Comment: correct_length used once
delay 00000074

Symbol: delay
   Definitions
      At line 47 in file App.s
   Uses
      At line 48 in file App.s
Comment: delay used once
div_check 0000013C

Symbol: div_check
   Definitions
      At line 114 in file App.s
   Uses
      At line 121 in file App.s
Comment: div_check used once
div_done 00000158

Symbol: div_done
   Definitions
      At line 122 in file App.s
   Uses
      At line 116 in file App.s
Comment: div_done used once
div_start 0000011C

Symbol: div_start
   Definitions
      At line 105 in file App.s
   Uses
      At line 124 in file App.s
Comment: div_start used once
div_sub 000000F8

Symbol: div_sub
   Definitions
      At line 94 in file App.s
   Uses
      At line 23 in file App.s
Comment: div_sub used once
div_sub_end 00000160

Symbol: div_sub_end



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 125 in file App.s
   Uses
      At line 107 in file App.s
Comment: div_sub_end used once
fin 000000F4

Symbol: fin
   Definitions
      At line 86 in file App.s
   Uses
      At line 86 in file App.s
Comment: fin used once
get_num_length 0000010C

Symbol: get_num_length
   Definitions
      At line 99 in file App.s
   Uses
      At line 103 in file App.s
Comment: get_num_length used once
light 00000040

Symbol: light
   Definitions
      At line 32 in file App.s
   Uses
      At line 22 in file App.s
Comment: light used once
loop 0000006C

Symbol: loop
   Definitions
      At line 45 in file App.s
   Uses
      At line 57 in file App.s
Comment: loop used once
neg_num 000000A4

Symbol: neg_num
   Definitions
      At line 61 in file App.s
   Uses
      At line 16 in file App.s
Comment: neg_num used once
neg_num_done 0000000C

Symbol: neg_num_done
   Definitions
      At line 17 in file App.s
   Uses
      At line 65 in file App.s
Comment: neg_num_done used once
not_zero 00000030

Symbol: not_zero
   Definitions
      At line 27 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 25 in file App.s
Comment: not_zero used once
rev_loop 000000D4

Symbol: rev_loop
   Definitions
      At line 76 in file App.s
   Uses
      At line 84 in file App.s
Comment: rev_loop used once
reverse_done 0000008C

Symbol: reverse_done
   Definitions
      At line 53 in file App.s
   Uses
      At line 78 in file App.s
Comment: reverse_done used once
reverse_sub 000000C4

Symbol: reverse_sub
   Definitions
      At line 71 in file App.s
   Uses
      At line 52 in file App.s
Comment: reverse_sub used once
set_neg 000000B4

Symbol: set_neg
   Definitions
      At line 66 in file App.s
   Uses
      At line 34 in file App.s
Comment: set_neg used once
set_neg_done 00000048

Symbol: set_neg_done
   Definitions
      At line 35 in file App.s
   Uses
      At line 70 in file App.s
Comment: set_neg_done used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 000000A0

Symbol: stop
   Definitions
      At line 59 in file App.s
   Uses
      At line 59 in file App.s
Comment: stop used once
unit 00000018



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: unit
   Definitions
      At line 21 in file App.s
   Uses
      At line 31 in file App.s
Comment: unit used once
while 00000060

Symbol: while
   Definitions
      At line 42 in file App.s
   Uses
      At line 58 in file App.s
Comment: while used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 12 in file App.s
   Uses
      At line 41 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 10 in file App.s
   Uses
      At line 36 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 11 in file App.s
   Uses
      At line 39 in file App.s
Comment: IO1SET used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
363 symbols in table
