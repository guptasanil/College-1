


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000         
   14 00000000         
   15 00000000                 AREA             globals, DATA, READWRITE
   16 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   17 00000007 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   18 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   19 00000015 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   20 0000001C 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   21 00000023 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   22 0000002A         
   23 0000002A         
   24 0000002A                 AREA             RESET, CODE, READONLY
   25 00000000                 ENTRY
   26 00000000         
   27 00000000         ; initialise SP to top of RAM
   28 00000000 E59FD478        LDR              R13, =0x40010000 ; initialse SP
                                                            
   29 00000004         
   30 00000004         ; initialise the console
   31 00000004 EB0000AB        BL               inithw
   32 00000008         
   33 00000008         ;
   34 00000008         ; your program goes here
   35 00000008         ;
   36 00000008         
   37 00000008 E3A04001        MOV              r4, #1      ;set turn counter t
                                                            o 1 (reds turn)
   38 0000000C E59F0470        LDR              r0, =str_go ;string s = str_go
   39 00000010 EB0000C1        BL               puts        ;print string s



ARM Macro Assembler    Page 2 


   40 00000014 EA000006        B                move
   41 00000018 E59F0468 
                       reset   LDR              r0, =BOARD  ;R0=address
   42 0000001C EB000045        BL               resetBoard  ;initialise board
   43 00000020 E59F0464        LDR              r0, =str_restartLn ;string x = 
                                                            str_restartLn
   44 00000024 EB0000BC        BL               puts        ;print string x
   45 00000028 E59F0460        LDR              r0, =str_nextln ;string x = str
                                                            _nextln
   46 0000002C EB0000BA        BL               puts        ;print string x
   47 00000030 E3A04001        MOV              r4, #1      ;r4 = 1 (so it'll b
                                                            e reds turn next)
   48 00000034 E59F144C 
                       move    LDR              r1, =BOARD  ;r1 = array address
                                                            
   49 00000038 EB00000E        BL               printBoard  ;go to printBoard
   50 0000003C E59F1444        LDR              r1, =BOARD  ;r1 = array address
                                                             (r1 is changed dur
                                                            ing the board print
                                                            ing process)
   51 00000040 E3540000        CMP              r4, #0      ;is r4 = 0?
   52 00000044 0A000002        BEQ              yTurn       ;if yes its yellows
                                                             turn... go to yTur
                                                            n
   53 00000048 E3A02022        LDR              r2, =0x22   ;else its reds turn
                                                            ... r2 = player col
                                                            our (red)
   54 0000004C E3A04000        MOV              r4, #0      ;r4 = 0 (so it'll b
                                                            e yellows turn next
                                                            )
   55 00000050 EA000001        B                turn        ;go to turn
   56 00000054 E3A02029 
                       yTurn   LDR              r2, =0x29   ;r2 = player colour
                                                             (yellow)
   57 00000058 E3A04001        MOV              r4, #1      ;r4 = 1 (so it'll b
                                                            e reds turn next)
   58 0000005C EB00003E 
                       turn    BL               playerChoice 
                                                            ;go to playerChoice
                                                            
   59 00000060 E3500072        CMP              R0, #0x72   ;is playerChoice = 
                                                            r?
   60 00000064 0AFFFFEB        BEQ              reset       ;if yes go to init
   61 00000068 E59F1418        LDR              r1, =BOARD  ;r1 = array address
                                                            
   62 0000006C E1A02000        MOV              r2, r0      ;r2 = col played
   63 00000070 EAFFFFEF        B                move        ;else next move
   64 00000074         
   65 00000074 EAFFFFFE 
                       stop    B                stop
   66 00000078         
   67 00000078         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
   68 00000078         ;
   69 00000078         ; your subroutines go here
   70 00000078         ;
   71 00000078         



ARM Macro Assembler    Page 3 


   72 00000078         ;
   73 00000078         ; printBoard subroutine
   74 00000078         ;  
   75 00000078         ; parameters:
   76 00000078         ; r1: board address
   77 00000078         ; return value:
   78 00000078         ; none
   79 00000078         ;
   80 00000078         printBoard
   81 00000078 E92D47F0        PUSH             {r4-r10, LR}
   82 0000007C E5910000        LDR              r0, [r1]    ;r1 = r0 (board add
                                                            ress)
   83 00000080 E3A04000        LDR              r4, =0      ;r4 = row index
   84 00000084 E3A05000        LDR              r5, =0      ;r5 = column index
   85 00000088 E1A0A001        MOV              r10, r1     ;r10 = board addres
                                                            s
   86 0000008C E3540000        CMP              r4, #0      ;is row == 0?
   87 00000090 1A00000D        BNE              nextRow     ;if not, go to next
                                                            Row
   88 00000094 E3550008 
                       printMarker
                               CMP              r5, #8      ;is column index < 
                                                            8?
   89 00000098 AA00000B        BGE              nextRow     ;if column index >=
                                                             8, go to nextRow..
                                                            . finished with row
                                                            
   90 0000009C E3550000        CMP              r5, #0      ;if this the first 
                                                            column?
   91 000000A0 1A000002        BNE              notBlank    ;if not the first c
                                                            olumn go to notBlan
                                                            k
   92 000000A4 E3A00020        MOV              r0, #0x20   ;r0 = space
   93 000000A8 EB000090        BL               put         ;print out r0
   94 000000AC EA000002        B                blank       ;go to blank
   95 000000B0 E1A00005 
                       notBlank
                               MOV              r0, r5      ;r0 = column index
   96 000000B4 E2800030        ADD              r0, r0, #0x30 
                                                            ;convert for ascii
   97 000000B8 EB00008C        BL               put         ;print r0
   98 000000BC E3A00020 
                       blank   MOV              r0, #0x20   ;r0 = 0x20 (space)
   99 000000C0 EB00008A        BL               put         ;print r0
  100 000000C4 E2855001        ADD              r5, r5, #1  ;column index++
  101 000000C8 EAFFFFF1        B                printMarker ;go to printMarker 
                                                            (print out markers 
                                                            1-7 on board edge f
                                                            or user)
  102 000000CC E59F03BC 
                       nextRow LDR              r0, =str_nextln ;string x = str
                                                            _nextln
  103 000000D0 EB000091        BL               puts        ;priint string x
  104 000000D4 E3A05000        MOV              r5, #0      ;r5 = column = 0
  105 000000D8 E2844001        ADD              r4, r4, #1  ;r4 = row++
  106 000000DC E3540007        CMP              r4, #7      ;is r4 (row index) 
                                                            >= 7? 
  107 000000E0 AA000011        BGE              done        ;if yes the finishe
                                                            d and go to done



ARM Macro Assembler    Page 4 


  108 000000E4 E3550008 
                       printColumn
                               CMP              r5, #8      ;else, is r5 (colum
                                                            n index) >= 8?
  109 000000E8 AAFFFFF7        BGE              nextRow     ;if yes, move on to
                                                             the next row
  110 000000EC E3550000        CMP              r5, #0      ;is column index = 
                                                            0?
  111 000000F0 1A000003        BNE              notMarkers  ;if not equal, go t
                                                            o notMarkers (not d
                                                            rawing the markers 
                                                            1-7 on edge of boar
                                                            d)
  112 000000F4 E1A00004        MOV              r0, r4      ;else, r0 = row ind
                                                            ex (r4)
  113 000000F8 E2800030        ADD              r0, r0, #0x30 
                                                            ;convert for ascii
  114 000000FC EB00007B        BL               put         ;print r0
  115 00000100 EA000005        B                nextColumn  ;go to nextColumn
  116 00000104 E1A0100A 
                       notMarkers
                               MOV              r1, r10     ;r1 = board array a
                                                            ddress
  117 00000108 E1A02004        MOV              r2, r4      ;r2 = row index
  118 0000010C E1A03005        MOV              r3, r5      ;r3 = column index
  119 00000110 EB00004C        BL               valueCheck  ;check what value i
                                                            s at specified row 
                                                            and column
  120 00000114 E2800030        ADD              r0, r0, #0x30 
                                                            ;convert for ascii
  121 00000118 EB000074        BL               put         ;print out row inde
                                                            x
  122 0000011C E3A00020 
                       nextColumn
                               MOV              r0, #0x20   ;r0 = 0x20 (space)
  123 00000120 EB000072        BL               put         ;print r0
  124 00000124 E2855001        ADD              r5, r5, #1  ;column index++
  125 00000128 EAFFFFED        B                printColumn ;go to printColumn
  126 0000012C E59F035C 
                       done    LDR              r0, =str_nextln ;string x = str
                                                            _nextln
  127 00000130 EB000079        BL               puts        ;print x
  128 00000134 E8BD87F0        POP              {r4-r10, PC}
  129 00000138         
  130 00000138         
  131 00000138         ;
  132 00000138         ; resetBoard subroutine
  133 00000138         ;  sets all values on 7x8 board to '0'
  134 00000138         ; parameters:
  135 00000138         ; r0: array address
  136 00000138         ; return value:
  137 00000138         ; none
  138 00000138         ;
  139 00000138         resetBoard
  140 00000138 E92D4070        PUSH             {r4-r6, LR}
  141 0000013C E1A04000        MOV              r4, r0      ;r4 = array address
                                                            
  142 00000140 E3A05000        MOV              r5, #0      ;r5 = '0' byte
  143 00000144 E3A06000        MOV              r6, #0      ;r6 = index, set in



ARM Macro Assembler    Page 5 


                                                            dex to 0
  144 00000148 E7C45006 
                       for     STRB             r5, [r4, r6] ;store r5 ('0') at
                                                             r4 (array address)
                                                             + r6 (index)
  145 0000014C E2866001        ADD              r6, r6, #1  ;index++
  146 00000150 E356002B        CMP              r6, #43     ;is index less than
                                                             43?
  147 00000154 BAFFFFFB        BLT              for         ;if yes, go to for
  148 00000158 E8BD8070        POP              {r4-r6, PC}
  149 0000015C         
  150 0000015C         
  151 0000015C         ;
  152 0000015C         ; playerChoice subroutine
  153 0000015C         ;  
  154 0000015C         ; parameters:
  155 0000015C         ; r1: array address, r2: player colour
  156 0000015C         ; return value:
  157 0000015C         ; r0: column that was chosen
  158 0000015C         ;
  159 0000015C         playerChoice
  160 0000015C E92D40F0        PUSH             {r4-r7, LR}
  161 00000160 E1A04001        MOV              r4, r1      ;r4 = arrat address
                                                            
  162 00000164 E1A05002        MOV              r5, r2      ;r5 = player colour
                                                            
  163 00000168 E1A00005        MOV              r0, r5      ;r0 = player colour
                                                            
  164 0000016C E2800030        ADD              r0, r0, #0x30 
                                                            ;convert for ascii
  165 00000170 EB00005E        BL               put         ;displays current p
                                                            layer colour
  166 00000174 E59F0318        LDR              r0, =str_input ;string x = str_
                                                            input
  167 00000178 EA000000        B                printString ;go to printString
  168 0000017C E59F0314 
                       fullColumn
                               LDR              r0, =str_fullCol ;string x = st
                                                            r_fullCol
  169 00000180 EB000065 
                       printString
                               BL               puts        ;print string x
  170 00000184 EB000052        BL               get         ;get ans
  171 00000188 E1A06000        MOV              r6, r0      ;r6 = chosen column
                                                            
  172 0000018C EB000057        BL               put         ;print r6
  173 00000190 E59F02F8        LDR              r0, =str_nextln ;string x = str
                                                            _nextln
  174 00000194 EB000060        BL               puts        ;print string x
  175 00000198 E3560072        CMP              r6, #0x72   ;did user press r?
  176 0000019C 0A00000C        BEQ              r           ;if yes go to r
  177 000001A0 E3560031        CMP              r6, #0x31   ;is chosen column l
                                                            ess than 1?
  178 000001A4 BA00000C        BLT              invalidInput ;if yes throw inva
                                                            lidInput
  179 000001A8 E3560037        CMP              r6, #0x37   ;is chosen column g
                                                            erater than 7?
  180 000001AC CA00000A        BGT              invalidInput ;if yes throw inva
                                                            lidInput



ARM Macro Assembler    Page 6 


  181 000001B0 E2466030        SUB              r6, r6, #0x30 ;convert chosen c
                                                            olumn back to decim
                                                            al
  182 000001B4 E1A01004        MOV              r1, r4      ;r1 = array address
                                                            
  183 000001B8 E1A02005        MOV              r2, r5      ;r2 = current colou
                                                            r
  184 000001BC E1A03006        MOV              r3, r6      ;r3 = column
  185 000001C0 EB000007        BL               executeChosenMove ;call execute
                                                            ChosenMove subrouti
                                                            ne 
  186 000001C4 E3500000        CMP              r0, #0      ;is move invalid?
  187 000001C8 0AFFFFEB        BEQ              fullColumn  ;if invalid go to f
                                                            ullColumn
  188 000001CC E1A00006        MOV              r0, r6      ;r0 = chosen column
                                                            
  189 000001D0 EA000000        B                end         ;finished
  190 000001D4 E3A00072 
                       r       MOV              r0, #0x72   ;the pressed r 
  191 000001D8 E8BD80F0 
                       end     POP              {r4-r7, PC}
  192 000001DC         
  193 000001DC E59F02B8 
                       invalidInput
                               LDR              r0, =str_inputError ;String x =
                                                             str_inputError
  194 000001E0 EAFFFFE6        B                printString ;print string x   
  195 000001E4         
  196 000001E4         
  197 000001E4         ;
  198 000001E4         ; executeChosenMove subroutine
  199 000001E4         ;  
  200 000001E4         ; parameters:
  201 000001E4         ; r1: array address, r2: player colour, r3: chosen colum
                       n
  202 000001E4         ; return value:
  203 000001E4         ; r0: 1 if valid move choice, 0 if invalid (column is fu
                       ll)
  204 000001E4         ;
  205 000001E4         executeChosenMove
  206 000001E4 E92D41F0        PUSH             {r4-r8, LR}
  207 000001E8 E1A04001        MOV              r4, r1      ;r4 = array address
                                                            
  208 000001EC E1A05002        MOV              r5, r2      ;r5 = player colour
                                                            
  209 000001F0 E1A06003        MOV              r6, r3      ;r6 = chosen column
                                                            
  210 000001F4 E3A07006        MOV              r7, #6      ;r7 = max row value
                                                            
  211 000001F8 E3A08000        MOV              r8, #0      ;r8 = empty row val
                                                            ue
  212 000001FC EA000004        B                first
  213 00000200 E2477001 
                       nextRow2
                               SUB              r7, r7, #1  ;reduce current row
                                                            
  214 00000204 E3570000        CMP              r7, #0      ;is current row at 
                                                            the lowest possible
                                                             position?



ARM Macro Assembler    Page 7 


  215 00000208 1A000001        BNE              first       ;if not go to first
                                                            
  216 0000020C E3A00000        MOV              r0, #0      ;else set r0 = 0 (s
                                                            ignifies invalid mo
                                                            ve)
  217 00000210 EA00000B        B                fin         ;go to fin (finishe
                                                            d)
  218 00000214 E1A01004 
                       first   MOV              r1, r4      ;r1 = array address
                                                            
  219 00000218 E1A02007        MOV              r2, r7      ;r2 = current row
  220 0000021C E1A03006        MOV              r3, r6      ;r3 = chosen column
                                                            
  221 00000220 EB000008        BL               valueCheck  ;get value
  222 00000224 E1500008        CMP              r0, r8      ;is value at locati
                                                            on empty?
  223 00000228 1AFFFFF4        BNE              nextRow2    ;if empty go to nex
                                                            tRow2
  224 0000022C E1A00005        MOV              r0, r5      ;r0 = current colou
                                                            r
  225 00000230 E1A01004        MOV              r1, r4      ;r1 = array address
                                                            
  226 00000234 E1A02007        MOV              r2, r7      ;r2 = lowest availa
                                                            ble row in chosen c
                                                            olumn
  227 00000238 E1A03006        MOV              r3, r6      ;r3 = chosen column
                                                            
  228 0000023C EB000014        BL               valueSet    ;go to valueSet sub
                                                            routine
  229 00000240 E3A00001        MOV              r0, #1      ;set r0 = 1 (signif
                                                            ies valid move)
  230 00000244 E8BD81F0 
                       fin     POP              {r4-r8, PC}
  231 00000248         
  232 00000248         
  233 00000248         ;
  234 00000248         ; valueCheck subroutine
  235 00000248         ;  
  236 00000248         ; parameters:
  237 00000248         ; r1: array address, r2: row, r3: column
  238 00000248         ; return value:
  239 00000248         ; r0: value at address
  240 00000248         ;
  241 00000248         valueCheck
  242 00000248 E92D00F0        PUSH             {r4-r7}
  243 0000024C E3A04007        MOV              r4, #7      ;r4 = row size = 7
  244 00000250 E3520007        CMP              r2, #7      ;is row on board?
  245 00000254 CA00000B        BGT              notOnBoard  ;if not, go to notO
                                                            nBoard
  246 00000258 E3530008        CMP              r3, #8      ;is column on board
                                                            ?
  247 0000025C CA000009        BGT              notOnBoard  ;if not, go to notO
                                                            nBoard
  248 00000260 E3520000        CMP              r2, #0      ;is row on board?
  249 00000264 BA000007        BLT              notOnBoard  ;if not, go to notO
                                                            nBoard
  250 00000268 E3530000        CMP              r3, #0      ;is column on board
                                                            ?
  251 0000026C BA000005        BLT              notOnBoard  ;if not, go to notO



ARM Macro Assembler    Page 8 


                                                            nBoard
  252 00000270 E2425001        SUB              r5, r2, #1  ;r5 = chosen row - 
                                                            1 (offset for ease 
                                                            of use)
  253 00000274 E2436001        SUB              r6, r3, #1  ;r6 = chosen column
                                                             - 1 (offset for ea
                                                            se of use)
  254 00000278 E0070495        MUL              r7, r5, r4  ;r7 = row * row siz
                                                            e
  255 0000027C E0877006        ADD              r7, r7, r6  ;r7 = r7 + chosen c
                                                            olumn (r7 now = spe
                                                            cified spot)
  256 00000280 E7D10007        LDRB             r0, [r1, r7] ;r7 = value at spe
                                                            cified spot
  257 00000284 EA000000        B                doneCheck   ;go to doneCheck
  258 00000288 E3A00000 
                       notOnBoard
                               MOV              r0, #0
  259 0000028C E8BD00F0 
                       doneCheck
                               POP              {r4-r7}
  260 00000290 E12FFF1E        BX               LR
  261 00000294         
  262 00000294         
  263 00000294         ;
  264 00000294         ; valueSet subroutine
  265 00000294         ;  
  266 00000294         ; parameters:
  267 00000294         ; r1: array address, r2: row, r3: column
  268 00000294         ; return value:
  269 00000294         ; r0: what colour to set
  270 00000294         ;
  271 00000294         valueSet
  272 00000294 E92D00F0        PUSH             {r4-r7}
  273 00000298 E3A04007        MOV              r4, #7      ;r4 = row size = 7
  274 0000029C E2425001        SUB              r5, r2, #1  ;r5 = chosen row
  275 000002A0 E2436001        SUB              r6, r3, #1  ;r6 = chosen column
                                                            
  276 000002A4 E0070495        MUL              r7, r5, r4  ;r7 = row * row siz
                                                            e
  277 000002A8 E0877006        ADD              r7, r7, r6  ;r7 = r7 + chosen c
                                                            olumn (r7 now = spe
                                                            cified spot)
  278 000002AC E7C10007        STRB             r0, [r1, r7] ;r7 = value at spe
                                                            cified spot
  279 000002B0 E8BD00F0        POP              {r4-r7}
  280 000002B4 E12FFF1E        BX               LR
  281 000002B8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
  282 000002B8         ;
  283 000002B8         ; inithw subroutines
  284 000002B8         ; performs hardware initialisation, including console
  285 000002B8         ; parameters:
  286 000002B8         ; none
  287 000002B8         ; return value:
  288 000002B8         ; none
  289 000002B8         ;



ARM Macro Assembler    Page 9 


  290 000002B8         inithw
  291 000002B8 E59F01EC        LDR              r0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  292 000002BC E3A01050        MOV              r1, #0x50
  293 000002C0 E5C01000        STRB             r1, [r0]
  294 000002C4 E59F01E4        LDR              r0, =U0LCR  ; 7 data bits + par
                                                            ity
  295 000002C8 E3A01002        LDR              r1, =0x02
  296 000002CC E5C01000        STRB             r1, [r0]
  297 000002D0 E12FFF1E        BX               LR
  298 000002D4         
  299 000002D4         ;
  300 000002D4         ; get subroutine
  301 000002D4         ; returns the ASCII code of the next character read on t
                       he console
  302 000002D4         ; parameters:
  303 000002D4         ; none
  304 000002D4         ; return value:
  305 000002D4         ; r0 - ASCII code of the character read on teh console (
                       byte)
  306 000002D4         ;
  307 000002D4 E59F11D8 
                       get     LDR              r1, =U0LSR  ; r1 -> U0LSR (Line
                                                             Status Register)
  308 000002D8 E5910000 
                       get0    LDR              r0, [r1]    ; wait until
  309 000002DC E2100001        ANDS             r0, #0x01   ; receiver data
  310 000002E0 0AFFFFFC        BEQ              get0        ; ready
  311 000002E4 E59F11CC        LDR              r1, =U0RBR  ; r1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  312 000002E8 E5D10000        LDRB             r0, [r1]    ; get received data
                                                            
  313 000002EC E12FFF1E        BX               LR          ; return
  314 000002F0         
  315 000002F0         ;
  316 000002F0         ; put subroutine
  317 000002F0         ; writes a character to the console
  318 000002F0         ; parameters:
  319 000002F0         ; r0 - ASCII code of the character to write
  320 000002F0         ; return value:
  321 000002F0         ; none
  322 000002F0         ;
  323 000002F0 E59F11BC 
                       put     LDR              r1, =U0LSR  ; r1 -> U0LSR (Line
                                                             Status Register)
  324 000002F4 E5D11000        LDRB             r1, [r1]    ; wait until transm
                                                            it
  325 000002F8 E2111020        ANDS             r1, r1, #0x20 
                                                            ; holding register
  326 000002FC 0AFFFFFB        BEQ              put         ; empty
  327 00000300 E59F11B0        LDR              r1, =U0THR  ; r1 -> U0THR
  328 00000304 E5C10000        STRB             r0, [r1]    ; output charcter
  329 00000308 E59F11A4 
                       put0    LDR              r1, =U0LSR  ; r1 -> U0LSR
  330 0000030C E5D11000        LDRB             r1, [r1]    ; wait until
  331 00000310 E2111040        ANDS             r1, r1, #0x40 ; transmitter
  332 00000314 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)



ARM Macro Assembler    Page 10 


  333 00000318 E12FFF1E        BX               LR          ; return
  334 0000031C         
  335 0000031C         ;
  336 0000031C         ; puts subroutine
  337 0000031C         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  338 0000031C         ; parameters:
  339 0000031C         ; r0 - address of NULL-terminated ASCII string
  340 0000031C         ; return value:
  341 0000031C         ; r0 - ASCII code of the character read on teh console (
                       byte)
  342 0000031C         ;
  343 0000031C E92D4010 
                       puts    STMFD            SP!, {r4, LR} ; push r4 and LR
  344 00000320 E1A04000        MOV              r4, r0      ; copy r0
  345 00000324 E4D40001 
                       puts0   LDRB             r0, [r4], #1 ; get character + 
                                                            increment r4
  346 00000328 E3500000        CMP              r0, #0      ; 0?
  347 0000032C 0A000001        BEQ              puts1       ; return
  348 00000330 EBFFFFEE        BL               put         ; put character
  349 00000334 EAFFFFFA        B                puts0       ; next character
  350 00000338 E8BD8010 
                       puts1   LDMFD            SP!, {r4, PC} ; pop r4 and PC
  351 0000033C         
  352 0000033C         
  353 0000033C         ;
  354 0000033C         ; hint! put the strings used by your program here ...
  355 0000033C         ;
  356 0000033C         
  357 0000033C         str_go
  358 0000033C 4C 65 74 
              27 73 20 
              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 0A 
              0D 0A 0D 
              00               DCB              "Let's play Connect4!",0xA, 0xD
, 0xA, 0xD, 0
  359 00000355         
  360 00000355         str_nextln
  361 00000355 0A 00           DCB              "", 0xA, 0
  362 00000357         
  363 00000357         str_input
  364 00000357 20 2D 20 
              69 74 27 
              73 20 79 
              6F 75 72 
              20 74 75 
              72 6E 21 
              20 57 68 
              65 72 65 
              20 77 6F 
              75 6C 64 
              20 79 6F 
              75 20 6C 
              69 6B 65 



ARM Macro Assembler    Page 11 


              20 74 6F 
              20 70 6C 
              61 63 65 
              20 79 6F 
              75 20 6D 
              61 72 6B 
              65 72 3F 
              20 6F 72 
              20 70 72 
              65 73 73 
              20 27 72 
              27 20 74 
              6F 20 72 
              65 73 65 
              74 20 62 
              6F 61 72 
              64 00            DCB              " - it's your turn! Where would
 you like to place you marker? or press 'r' to reset board", 0
  365 000003B0         
  366 000003B0         str_inputError
  367 000003B0 49 6E 76 
              61 6C 69 
              64 20 69 
              6E 70 75 
              74 2C 20 
              70 6C 65 
              61 73 65 
              20 63 68 
              6F 6F 73 
              65 20 61 
              20 6E 75 
              6D 62 65 
              72 20 66 
              72 6F 6D 
              20 31 2D 
              37 3A 20 
              00               DCB              "Invalid input, please choose a
 number from 1-7: ", 0
  368 000003E1         
  369 000003E1         str_fullCol
  370 000003E1 4E 6F 74 
              20 74 68 
              65 72 65 
              21 20 54 
              68 61 74 
              20 63 6F 
              6C 75 6D 
              6E 20 75 
              73 20 66 
              75 6C 6C 
              2C 20 74 
              72 79 20 
              61 67 61 
              69 6E 21 
              0A 0D 00         DCB              "Not there! That column us full
, try again!", 0xA, 0xD, 0
  371 0000040E         
  372 0000040E         str_yWins
  373 0000040E 59 65 6C 



ARM Macro Assembler    Page 12 


              6C 6F 77 
              20 69 73 
              20 74 68 
              65 20 57 
              69 6E 6E 
              65 72 21 
              0A 0D 00         DCB              "Yellow is the Winner!", 0xA, 0
xD, 0
  374 00000426         
  375 00000426         str_rWins
  376 00000426 52 65 64 
              20 69 73 
              20 74 68 
              65 20 57 
              69 6E 6E 
              65 72 21 
              0A 0D 00         DCB              "Red is the Winner!", 0xA, 0xD,
 0
  377 0000043B         
  378 0000043B         str_restartLn
  379 0000043B 49 66 20 
              79 6F 75 
              20 77 61 
              6E 74 20 
              74 6F 20 
              70 6C 61 
              79 20 61 
              67 61 69 
              6E 20 70 
              6C 65 61 
              73 65 20 
              70 72 65 
              73 73 20 
              27 71 27 
              0A 0D 00         DCB              "If you want to play again plea
se press 'q'", 0xA, 0xD, 0
  380 00000468         
  381 00000468         str_newGame
  382 00000468 4E 65 77 
              20 67 61 
              6D 65 2C 
              20 62 6F 
              61 72 64 
              20 72 65 
              73 65 74 
              0A 0D 00         DCB              "New game, board reset", 0xA, 0
xD, 0
  383 00000480         
  384 00000480                 END
              40010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 13 


              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -I"F:\College\CS1021 - Computing\ARM\R
V31\INC" -I"F:\College\CS1021 - Computing\ARM\CMSIS\Include" -I"F:\College\CS10
21 - Computing\ARM\INC\Philips" --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 526" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 16 in file connect4.s
   Uses
      At line 41 in file connect4.s
      At line 48 in file connect4.s
      At line 50 in file connect4.s
      At line 61 in file connect4.s

globals 00000000

Symbol: globals
   Definitions
      At line 15 in file connect4.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 24 in file connect4.s
   Uses
      None
Comment: RESET unused
blank 000000BC

Symbol: blank
   Definitions
      At line 98 in file connect4.s
   Uses
      At line 94 in file connect4.s
Comment: blank used once
done 0000012C

Symbol: done
   Definitions
      At line 126 in file connect4.s
   Uses
      At line 107 in file connect4.s
Comment: done used once
doneCheck 0000028C

Symbol: doneCheck
   Definitions
      At line 259 in file connect4.s
   Uses
      At line 257 in file connect4.s
Comment: doneCheck used once
end 000001D8

Symbol: end
   Definitions
      At line 191 in file connect4.s
   Uses
      At line 189 in file connect4.s
Comment: end used once
executeChosenMove 000001E4

Symbol: executeChosenMove
   Definitions
      At line 205 in file connect4.s
   Uses
      At line 185 in file connect4.s
Comment: executeChosenMove used once
fin 00000244

Symbol: fin
   Definitions
      At line 230 in file connect4.s
   Uses
      At line 217 in file connect4.s
Comment: fin used once
first 00000214

Symbol: first



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 218 in file connect4.s
   Uses
      At line 212 in file connect4.s
      At line 215 in file connect4.s

for 00000148

Symbol: for
   Definitions
      At line 144 in file connect4.s
   Uses
      At line 147 in file connect4.s
Comment: for used once
fullColumn 0000017C

Symbol: fullColumn
   Definitions
      At line 168 in file connect4.s
   Uses
      At line 187 in file connect4.s
Comment: fullColumn used once
get 000002D4

Symbol: get
   Definitions
      At line 307 in file connect4.s
   Uses
      At line 170 in file connect4.s
Comment: get used once
get0 000002D8

Symbol: get0
   Definitions
      At line 308 in file connect4.s
   Uses
      At line 310 in file connect4.s
Comment: get0 used once
inithw 000002B8

Symbol: inithw
   Definitions
      At line 290 in file connect4.s
   Uses
      At line 31 in file connect4.s
Comment: inithw used once
invalidInput 000001DC

Symbol: invalidInput
   Definitions
      At line 193 in file connect4.s
   Uses
      At line 178 in file connect4.s
      At line 180 in file connect4.s

move 00000034

Symbol: move
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 48 in file connect4.s
   Uses
      At line 40 in file connect4.s
      At line 63 in file connect4.s

nextColumn 0000011C

Symbol: nextColumn
   Definitions
      At line 122 in file connect4.s
   Uses
      At line 115 in file connect4.s
Comment: nextColumn used once
nextRow 000000CC

Symbol: nextRow
   Definitions
      At line 102 in file connect4.s
   Uses
      At line 87 in file connect4.s
      At line 89 in file connect4.s
      At line 109 in file connect4.s

nextRow2 00000200

Symbol: nextRow2
   Definitions
      At line 213 in file connect4.s
   Uses
      At line 223 in file connect4.s
Comment: nextRow2 used once
notBlank 000000B0

Symbol: notBlank
   Definitions
      At line 95 in file connect4.s
   Uses
      At line 91 in file connect4.s
Comment: notBlank used once
notMarkers 00000104

Symbol: notMarkers
   Definitions
      At line 116 in file connect4.s
   Uses
      At line 111 in file connect4.s
Comment: notMarkers used once
notOnBoard 00000288

Symbol: notOnBoard
   Definitions
      At line 258 in file connect4.s
   Uses
      At line 245 in file connect4.s
      At line 247 in file connect4.s
      At line 249 in file connect4.s
      At line 251 in file connect4.s

playerChoice 0000015C



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: playerChoice
   Definitions
      At line 159 in file connect4.s
   Uses
      At line 58 in file connect4.s
Comment: playerChoice used once
printBoard 00000078

Symbol: printBoard
   Definitions
      At line 80 in file connect4.s
   Uses
      At line 49 in file connect4.s
Comment: printBoard used once
printColumn 000000E4

Symbol: printColumn
   Definitions
      At line 108 in file connect4.s
   Uses
      At line 125 in file connect4.s
Comment: printColumn used once
printMarker 00000094

Symbol: printMarker
   Definitions
      At line 88 in file connect4.s
   Uses
      At line 101 in file connect4.s
Comment: printMarker used once
printString 00000180

Symbol: printString
   Definitions
      At line 169 in file connect4.s
   Uses
      At line 167 in file connect4.s
      At line 194 in file connect4.s

put 000002F0

Symbol: put
   Definitions
      At line 323 in file connect4.s
   Uses
      At line 93 in file connect4.s
      At line 97 in file connect4.s
      At line 99 in file connect4.s
      At line 114 in file connect4.s
      At line 121 in file connect4.s
      At line 123 in file connect4.s
      At line 165 in file connect4.s
      At line 172 in file connect4.s
      At line 326 in file connect4.s
      At line 348 in file connect4.s

put0 00000308




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: put0
   Definitions
      At line 329 in file connect4.s
   Uses
      At line 332 in file connect4.s
Comment: put0 used once
puts 0000031C

Symbol: puts
   Definitions
      At line 343 in file connect4.s
   Uses
      At line 39 in file connect4.s
      At line 44 in file connect4.s
      At line 46 in file connect4.s
      At line 103 in file connect4.s
      At line 127 in file connect4.s
      At line 169 in file connect4.s
      At line 174 in file connect4.s

puts0 00000324

Symbol: puts0
   Definitions
      At line 345 in file connect4.s
   Uses
      At line 349 in file connect4.s
Comment: puts0 used once
puts1 00000338

Symbol: puts1
   Definitions
      At line 350 in file connect4.s
   Uses
      At line 347 in file connect4.s
Comment: puts1 used once
r 000001D4

Symbol: r
   Definitions
      At line 190 in file connect4.s
   Uses
      At line 176 in file connect4.s
Comment: r used once
reset 00000018

Symbol: reset
   Definitions
      At line 41 in file connect4.s
   Uses
      At line 60 in file connect4.s
Comment: reset used once
resetBoard 00000138

Symbol: resetBoard
   Definitions
      At line 139 in file connect4.s
   Uses
      At line 42 in file connect4.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: resetBoard used once
stop 00000074

Symbol: stop
   Definitions
      At line 65 in file connect4.s
   Uses
      At line 65 in file connect4.s
Comment: stop used once
str_fullCol 000003E1

Symbol: str_fullCol
   Definitions
      At line 369 in file connect4.s
   Uses
      At line 168 in file connect4.s
Comment: str_fullCol used once
str_go 0000033C

Symbol: str_go
   Definitions
      At line 357 in file connect4.s
   Uses
      At line 38 in file connect4.s
Comment: str_go used once
str_input 00000357

Symbol: str_input
   Definitions
      At line 363 in file connect4.s
   Uses
      At line 166 in file connect4.s
Comment: str_input used once
str_inputError 000003B0

Symbol: str_inputError
   Definitions
      At line 366 in file connect4.s
   Uses
      At line 193 in file connect4.s
Comment: str_inputError used once
str_newGame 00000468

Symbol: str_newGame
   Definitions
      At line 381 in file connect4.s
   Uses
      None
Comment: str_newGame unused
str_nextln 00000355

Symbol: str_nextln
   Definitions
      At line 360 in file connect4.s
   Uses
      At line 45 in file connect4.s
      At line 102 in file connect4.s
      At line 126 in file connect4.s
      At line 173 in file connect4.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


str_rWins 00000426

Symbol: str_rWins
   Definitions
      At line 375 in file connect4.s
   Uses
      None
Comment: str_rWins unused
str_restartLn 0000043B

Symbol: str_restartLn
   Definitions
      At line 378 in file connect4.s
   Uses
      At line 43 in file connect4.s
Comment: str_restartLn used once
str_yWins 0000040E

Symbol: str_yWins
   Definitions
      At line 372 in file connect4.s
   Uses
      None
Comment: str_yWins unused
turn 0000005C

Symbol: turn
   Definitions
      At line 58 in file connect4.s
   Uses
      At line 55 in file connect4.s
Comment: turn used once
valueCheck 00000248

Symbol: valueCheck
   Definitions
      At line 241 in file connect4.s
   Uses
      At line 119 in file connect4.s
      At line 221 in file connect4.s

valueSet 00000294

Symbol: valueSet
   Definitions
      At line 271 in file connect4.s
   Uses
      At line 228 in file connect4.s
Comment: valueSet used once
yTurn 00000054

Symbol: yTurn
   Definitions
      At line 56 in file connect4.s
   Uses
      At line 52 in file connect4.s
Comment: yTurn used once
48 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 291 in file connect4.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 294 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 12 in file connect4.s
   Uses
      At line 307 in file connect4.s
      At line 323 in file connect4.s
      At line 329 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s
   Uses
      At line 311 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 327 in file connect4.s
Comment: U0THR used once
5 symbols
389 symbols in table
