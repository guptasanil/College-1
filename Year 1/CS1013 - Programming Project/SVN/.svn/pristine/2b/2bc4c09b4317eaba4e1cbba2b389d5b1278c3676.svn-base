class BarGraph {

  ArrayList <Integer> results = new ArrayList();
  ArrayList<Story> storyList = new ArrayList();
  int noOfGraphs;
  int nextX, nextY;
  int tallestGraph = 100;
  int multiplier, big;
  String username, story, comment;
  ArrayList widgetList;

  final int FIRSTX = 50, FIRSTY = 145, SPACING = 50, MARGINX = 250;

  BarGraph(ArrayList<Integer> results) {
    this.story = null;
    this.storyList = null;
    this.comment = null;
    this.username = null;
    this.results = results;
    this.noOfGraphs = results.size();
    widgetList = new ArrayList();
  }
  
  BarGraph(ArrayList<Integer> results, ArrayList<Story> storyList, String username, String story, String comment) {
    this.story = story;
    this.storyList = storyList;
    this.comment = comment;
    this.username = username;
    this.results = results;
    this.noOfGraphs = results.size();
    widgetList = new ArrayList();
  }

  void addWidget(Widget widget) {
    widgetList.add(widget);
  }

  void draw() {
    noStroke();
    if(username != null){
      textSize(30);
      fill(255);
      text("Stories and Comments of author " + username, 150 , 50);
      textSize(18);
      text(story, FIRSTX -45, FIRSTY - 22);
      text(comment, FIRSTX -45, FIRSTY + 43);
    }
    int temp = biggestValue();
    if (temp > 0) {
      big = results.get(temp);
      multiplier = (width - 90) / big;
    }
    graph();
    for (int i = 0; i<widgetList.size(); i++)
    { 
      Widget aWidget = (Widget) widgetList.get(i); 
      aWidget.draw();
    }
    printTopStories();
    String ratio = calculateRatio();
    if(ratio != null){
      fill(255);
      textSize(STORY_SIZE);
      text(ratio, MARGINX + 45, FIRSTY + 400); 
    }
  }

  void graph () {
    nextX = FIRSTX;
    nextY = FIRSTY;
    for (int i = 0; i < results.size(); i++) {
      display(results.get(i));
    }
  }


  void display(int currentResult) {
    fill(255);
    text(currentResult, nextX, nextY);
    bar(currentResult);
    nextY += 65;
  }

  // creates bar display
  void bar(int currentResult) {
    int x, y, w, h;
    x = nextX + 60;
    y = nextY - SPACING;
    w = currentResult * multiplier;
    h = SPACING-2;
    fill(255, 0, 0);
    rectMode( CORNER );
    rect( x, y, w, h );
  }

  int mousePressed() {
    int event;
    for (int i = 0; i<widgetList.size(); i++) { 
      Widget aWidget = (Widget) widgetList.get(i);
      event = aWidget.getEvent(mouseX, mouseY);
      if (event != EVENT_NULL) {
        return event;
      }
    }
    return EVENT_NULL;
  }

  // returns index of largest valye in results ArrayList
  int biggestValue() {
    int temp = 0;
    for (int i = 0; i < results.size(); i ++) {
      if (results.get(i) > results.get(temp)) {
        temp = i;
      }
    }
    return temp;
  }
  
  String calculateRatio(){
    String ratio = null;
    if((story != null) && (comment != null)){
      int stories = results.get(0);
      float comments = results.get(1);
      comments = comments / stories;
      String comment = String.format("%.2f", comments);
      stories = stories / stories;
      ratio = "Stories to Comments ratio = " + stories + " : " + comment;
    }
    return ratio;
  }
  
  void printTopStories(){
    int nextY = 150;
    textFont(widgetFont);
    fill(255);
    for (int i = 0; i < 5; i ++){
      textSize(STORY_SIZE);
      text(storyList.get(i).score, MARGINX + 15, FIRSTY + 5 + nextY - vs2.spos);
      text(storyList.get(i).title, MARGINX + 45, FIRSTY + nextY - vs2.spos);
      textSize(AUTHOR_SIZE);
      text(storyList.get(i).formattedTime, MARGINX + 45, FIRSTY + nextY + 15 - vs2.spos);
      text("Author: " + popularStories.get(i).by, MARGINX + 200, FIRSTY + 15 + nextY - vs2.spos);   
      nextY += 40;
    }  
  }
}
